{"version":3,"sources":["services/api.js","components/Map/index.js","pages/Chart/index.js","routes.js","App.js","stores/rootStore.js","index.js"],"names":["api","axios","create","baseURL","Map","radiusScale","d3","margin","useState","selectedCity","setSelectedCity","covidData","setcovidData","dispatch","useDispatch","citiesCoordinates","useSelector","state","coordinatesReducer","useEffect","get","then","res","data","type","city","maxValue","filter","d","cityIbgeCode","map","parseFloat","caseCount","isNaN","forEach","c","find","ibgeCode","parseInt","deathCount","domain","range","createMap","document","getElementById","clientWidth","clientHeight","mapTopology","useLayoutEffect","updateSize","resizeMap","window","addEventListener","removeEventListener","divWidth","divHeight","width","attr","citiesCodinates","height","svg","append","projection","center","translate","scale","path","cities","topojson","objects","features","selectAll","enter","on","this","classed","properties","cod","nodes","s","latLng","lng","lat","id","Chart","setCovidData","selectedCityReducer","numberFormat","value","toLocaleString","undefined","maximumFractionDigits","className","Routes","component","App","sc","rootReducer","combineReducers","action","citiesCordinates","store","createStore","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.d846adc6.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst api = axios.create({\n  baseURL: 'https://covid-sc-monitor-backend.herokuapp.com/'\n})\n\nexport default api;","import React, { useEffect, useLayoutEffect, useState } from 'react';\n\nimport * as d3 from 'd3'\nimport * as topojson from \"topojson-client\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport api from '../../services/api'\n\nimport mapTopology from '../../data/map.json';\nimport './style.css'\n\n\nexport default function Map() {\n\n  const radiusScale = d3.scaleSqrt();\n\n  const margin = { top: 50, left: 50, right: 50, bottom: 50 };\n  const [selectedCity, setSelectedCity] = useState('');\n  const [covidData, setcovidData] = useState([]);\n\n  const dispatch = useDispatch()\n  const { citiesCoordinates } = useSelector(state => ({ ...state.coordinatesReducer }))\n\n  useEffect(() => {\n    api.get(`/city`)\n      .then(res => {\n        setcovidData(res.data)\n      })\n  }, []);\n\n  useEffect(() => {\n    dispatch({\n      type: \"SET_CITY\",\n      city: selectedCity\n    })\n\n  }, [selectedCity]);\n\n\n  useEffect(() => {\n    let maxValue = d3.max(covidData.filter(d => d.cityIbgeCode != '42').map(d => parseFloat(d.caseCount)))\n\n    if (isNaN(maxValue) === false) {\n\n      citiesCoordinates.forEach(c => {\n        let data = covidData.find(d => d.cityIbgeCode == c.ibgeCode)\n        if (data) {\n          c.caseCount = parseInt(data.caseCount);\n          c.deathCount = parseInt(data.deathCount);\n        } else {\n          c.caseCount = 0;\n          c.deathCount = 0;\n        }\n      })\n\n      dispatch({\n        type: \"DESELECT_CITY\"\n      })\n\n      radiusScale\n        .domain([0, maxValue])\n        .range([0, 30]);\n\n      createMap(\n        document.getElementById('map').clientWidth,\n        document.getElementById('map').clientHeight,\n        mapTopology,\n        citiesCoordinates\n      )\n    }\n\n\n  }, [covidData]);\n\n\n  useLayoutEffect(() => {\n    function updateSize() {\n\n      resizeMap(\n        document.getElementById('map').clientWidth,\n        document.getElementById('map').clientHeight\n      )\n    }\n    window.addEventListener('resize', updateSize);\n    updateSize();\n    return () => window.removeEventListener('resize', updateSize);\n  }, []);\n\n  let resizeMap = (divWidth, divHeight) => {\n    let width = divWidth - margin.left - margin.right;\n\n    d3.select(\"g\").attr(\"transform\", \"scale(\" + width / 900 + \")\");\n  }\n\n  var createMap = (divWidth, divHeight, data, citiesCodinates) => {\n\n    let height = divHeight - margin.top - margin.bottom,\n      width = divWidth - margin.left - margin.right;\n\n    let svg = d3.select('#map')\n      .append('svg')\n      .attr('height', height + margin.top + margin.bottom)\n      .attr('width', width + margin.left + margin.right)\n      .append('g')\n      .attr('transform', `translate(${margin.left}, ${margin.right})`);\n\n\n    let projection = d3.geoMercator()\n      .center([-50.80, -27.61])\n      .translate([width / 2, height / 2])\n      .scale(10000)\n\n    let path = d3.geoPath()\n      .projection(projection);\n\n    let cities = topojson.feature(data, data.objects['42']).features;\n\n    svg.selectAll('.city')\n      .data(cities)\n      .enter().append('path')\n      .attr('class', 'city')\n      .attr('d', path)\n      .on('mouseover', function () {\n        d3.select(this).classed('city-hovered', true)\n      }).on('mouseout', function () {\n        d3.select(this).classed('city-hovered', false)\n      })\n      .on('click', function (d) {\n        let city = citiesCodinates.find(c => c.ibgeCode === d.properties.cod)\n        setSelectedCity(city)\n        let selecteds = d3.select('#map').selectAll('.city.city-selected')\n        selecteds.nodes().forEach((s) => {\n          d3.select(s).classed('city-selected', false)\n        })\n        d3.select(this).classed('city-selected', true)\n      })\n\n    svg.selectAll('.city-circle')\n      .data(citiesCodinates)\n      .enter().append(\"circle\")\n      .attr('class', 'circle')\n      .attr(\"cx\", function (c) {\n        var coords = projection([c.latLng.lng, c.latLng.lat]);\n        return coords[0]\n      })\n      .attr(\"cy\", function (c) {\n        var coords = projection([c.latLng.lng, c.latLng.lat]);\n        return coords[1]\n      })\n      .attr(\"r\", d => { return radiusScale(d.caseCount) })\n      .on('click', function (d) {\n        let city = citiesCodinates.find(c => c.ibgeCode === d.ibgeCode)\n        setSelectedCity(city)\n      })\n\n  }\n\n  return (\n    <div id=\"map\"></div>\n  )\n}","import React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport api from '../../services/api'\n\nimport Map from '../../components/Map'\n\nimport './style.css'\n\n\nexport default function Chart() {\n\n  const [covidData, setCovidData] = useState('');\n\n  const { selectedCity } = useSelector(state => ({ ...state.selectedCityReducer }))\n\n  const numberFormat = (value) => (parseInt(value) || 0).toLocaleString(undefined, {maximumFractionDigits:2}) ;\n\n\n  useEffect(() => {\n    api.get(`/city/${selectedCity.ibgeCode}`)\n      .then(res => {\n        setCovidData(res.data)\n      })\n  }, [selectedCity])\n\n\n  return (\n    <div className=\"container\">\n      <div className=\"chart-container\">\n        <Map />\n      </div>\n      <div className=\"details-container\">\n        <div className=\"details\">\n          <p className=\"title\">\n            {selectedCity.city || 'Santa Catarina'}\n          </p>\n          <div className=\"summary\">\n            <div className=\"summary-item\">\n              <div className=\"description\">\n                Casos confirmados:\n              </div>\n              <div className=\"value\">\n                {numberFormat(covidData.caseCount)}\n              </div>\n            </div>\n            <div className=\"summary-item\">\n              <div className=\"description\">\n                Obitos:\n              </div>\n              <div className=\"value\">\n                {numberFormat(covidData.deathCount)}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}","import React from 'react'\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\n\nimport Chart from './pages/Chart'\n\nexport default function Routes() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route path=\"/\" component={Chart}/>\n      </Switch>\n    </BrowserRouter>\n  );\n}","import React from 'react';\n\nimport './global.css'\n\nimport Routes from './routes'\n\nfunction App() {\n  return (\n   <Routes />\n  );\n}\n\nexport default App;","import { createStore, combineReducers } from \"redux\";\nimport citiesCordinates from '../data/cities-codinates.json';\n\nlet INITIAL_STATE = {}\n\nlet sc = {\n  city: \"Santa Catarina\",\n  ibgeCode: 42\n}\n\nfunction selectedCityReducer(state = { selectedCity: sc}, action) {\n  switch (action.type) {\n    case \"SET_CITY\":\n      return {\n        ...state,\n        selectedCity: action.city\n      };\n    case \"DESELECT_CITY\":\n      return {\n        ...state,\n        selectedCity: sc\n      };\n    default:\n      return state;\n  }\n}\n\nfunction coordinatesReducer(state = { citiesCoordinates: citiesCordinates }, action) {\n  return state;\n}\n\n\nconst rootReducer = combineReducers({\n  selectedCityReducer,\n  coordinatesReducer\n})\n\nexport const store = createStore(rootReducer, INITIAL_STATE);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\n\nimport { store } from \"./stores/rootStore.js\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}