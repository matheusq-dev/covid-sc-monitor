{"version":3,"sources":["services/api.js","components/Map/index.js","components/HistoricalDataChart/index.js","components/SearchBar/index.js","pages/Chart/index.js","routes.js","App.js","stores/rootStore.js","index.js"],"names":["api","axios","create","baseURL","Map","radiusScale","d3","margin","useState","selectedCity","setSelectedCity","covidData","setcovidData","dispatch","useDispatch","citiesCoordinates","useSelector","state","coordinatesReducer","useEffect","get","then","res","data","type","city","maxValue","filter","d","cityIbgeCode","map","parseFloat","confirmedPer100k","isNaN","forEach","c","find","ibgeCode","caseCount","parseInt","deathCount","domain","range","createMap","document","getElementById","clientWidth","clientHeight","mapTopology","useLayoutEffect","updateSize","resizeMap","window","addEventListener","removeEventListener","divWidth","divHeight","width","attr","citiesCodinates","height","svg","append","projection","center","translate","scale","path","cities","topojson","objects","features","console","log","selectAll","enter","on","this","classed","properties","cod","nodes","s","latLng","lng","lat","id","HistoricalDataChart","props","historicalCaseData","setHistoricalCaseData","labels","date","caseDataset","cases","datasets","label","canvas","gradient","getContext","createLinearGradient","addColorStop","backgroundColor","borderColor","borderWidth","pointColor","pointStrokeColor","pointHighlightFill","pointHighlightStroke","options","legend","display","responsive","scales","xAxes","ticks","callback","value","m","moment","format","redraw","SearchBar","searchText","setSearchText","recomendations","setRecomendations","recomendationsShown","setRecomendationsShown","cleanButtonShown","setCleanButtonShown","undefined","rootCity","selectedCityReducer","ref","useRef","handler","listener","event","current","contains","target","useOnClickOutside","cityName","toUpperCase","normalize","replace","valueToFind","includes","slice","length","className","onSubmit","e","preventDefault","onChange","onFocus","placeholder","name","tabIndex","autoComplete","onClick","index","key","onKeyDown","isTabCode","keyCode","isEnterCode","isLast","focus","Chart","setCovidData","numberFormat","toLocaleString","maximumFractionDigits","Routes","component","App","sc","rootReducer","combineReducers","action","citiesCordinates","store","createStore","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.02367919.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst api = axios.create({\r\n  baseURL: 'https://covid-sc-monitor-backend.herokuapp.com/'\r\n})\r\n\r\nexport default api;","import React, { useEffect, useLayoutEffect, useState } from 'react';\r\nimport * as d3 from 'd3'\r\nimport * as topojson from \"topojson-client\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport api from '../../services/api'\r\n\r\nimport mapTopology from '../../data/map.json';\r\nimport './style.css'\r\n\r\nexport default function Map() {\r\n\r\n  const radiusScale = d3.scaleSqrt();\r\n  const margin = { top: 50, left: 50, right: 50, bottom: 50 };\r\n  const [selectedCity, setSelectedCity] = useState('');\r\n  const [covidData, setcovidData] = useState([]);\r\n\r\n  const dispatch = useDispatch()\r\n  const { citiesCoordinates } = useSelector(state => ({ ...state.coordinatesReducer }))\r\n\r\n  useEffect(() => {\r\n    api.get(`/city`)\r\n      .then(res => {\r\n        setcovidData(res.data)\r\n      })\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    dispatch({\r\n      type: \"SET_CITY\",\r\n      city: selectedCity\r\n    })\r\n\r\n  }, [selectedCity]);\r\n\r\n  useEffect(() => {\r\n    let maxValue = d3.max(covidData.filter(d => d.cityIbgeCode != '42').map(d => parseFloat(d.confirmedPer100k)))\r\n    if (isNaN(maxValue) === false) {\r\n      citiesCoordinates.forEach(c => {\r\n        let data = covidData.find(d => d.cityIbgeCode == c.ibgeCode)\r\n        if (data) {\r\n          c.caseCount = parseInt(data.caseCount);\r\n          c.deathCount = parseInt(data.deathCount);\r\n          c.confirmedPer100k = parseFloat(data.confirmedPer100k);\r\n        } else {\r\n          c.caseCount = 0;\r\n          c.deathCount = 0;\r\n        }\r\n      })\r\n\r\n      dispatch({\r\n        type: \"DESELECT_CITY\"\r\n      })\r\n\r\n      radiusScale\r\n        .domain([0, maxValue])\r\n        .range([0, 30]);\r\n\r\n      createMap(\r\n        document.getElementById('map').clientWidth,\r\n        document.getElementById('map').clientHeight,\r\n        mapTopology,\r\n        citiesCoordinates\r\n      )\r\n    }\r\n  }, [covidData]);\r\n\r\n  useLayoutEffect(() => {\r\n    function updateSize() {\r\n\r\n      resizeMap(\r\n        document.getElementById('map').clientWidth,\r\n        document.getElementById('map').clientHeight\r\n      )\r\n    }\r\n    window.addEventListener('resize', updateSize);\r\n    updateSize();\r\n    return () => window.removeEventListener('resize', updateSize);\r\n  }, []);\r\n\r\n  let resizeMap = (divWidth, divHeight) => {\r\n    let width = divWidth - margin.left - margin.right;\r\n\r\n    d3.select(\"g\").attr(\"transform\", \"scale(\" + width / 900 + \")\");\r\n  }\r\n\r\n  var createMap = (divWidth, divHeight, data, citiesCodinates) => {\r\n\r\n    let height = divHeight - margin.top - margin.bottom,\r\n      width = divWidth - margin.left - margin.right;\r\n\r\n    let svg = d3.select('#map')\r\n      .append('svg')\r\n      .attr('height', height + margin.top + margin.bottom)\r\n      .attr('width', width + margin.left + margin.right)\r\n      .append('g')\r\n      .attr('transform', `translate(${margin.left}, ${margin.right})`);\r\n\r\n    let defs = svg.append(\"defs\");\r\n    var stripes = defs.append(\"pattern\")\r\n      .attr(\"id\", \"stripes\")\r\n      .attr(\"width\", 8)\r\n      .attr(\"height\", 10)\r\n      .attr(\"patternUnits\", \"userSpaceOnUse\")\r\n      .attr(\"patternTransform\", \"rotate(45 50 50)\")\r\n\r\n    stripes.append(\"line\")\r\n      .attr(\"stroke\", \"rgb(219, 217, 217)\")\r\n      .attr(\"stroke-width\", 5)\r\n      .attr(\"y2\", 20);\r\n\r\n    let projection = d3.geoMercator()\r\n      .center([-50.80, -27.61])\r\n      .translate([width / 2, height / 2])\r\n      .scale(10000)\r\n\r\n    let path = d3.geoPath()\r\n      .projection(projection);\r\n\r\n    let cities = topojson.feature(data, data.objects['42']).features;\r\n\r\n    console.log(citiesCodinates)\r\n\r\n    svg.selectAll('.city')\r\n      .data(cities)\r\n      .enter().append('path')\r\n\r\n      .attr('class', 'city')\r\n      .attr('d', path)\r\n      .on('mouseover', function () {\r\n        d3.select(this).classed('city-hovered', true)\r\n\r\n      }).on('mouseout', function () {\r\n        d3.select(this).classed('city-hovered', false)\r\n      })\r\n      .on('click', function (d) {\r\n        let city = citiesCodinates.find(c => c.ibgeCode === d.properties.cod)\r\n        setSelectedCity(city)\r\n        let selecteds = d3.select('#map').selectAll('.city.city-selected')\r\n        selecteds.nodes().forEach((s) => {\r\n          d3.select(s).classed('city-selected', false)\r\n        })\r\n        d3.select(this).classed('city-selected', true)\r\n      })\r\n\r\n    svg.selectAll('.city-circle')\r\n      .data(citiesCodinates)\r\n      .enter().append(\"circle\")\r\n      .attr('class', 'circle')\r\n      .attr(\"cx\", function (c) {\r\n        var coords = projection([c.latLng.lng, c.latLng.lat]);\r\n        return coords[0]\r\n      })\r\n      .attr(\"cy\", function (c) {\r\n        var coords = projection([c.latLng.lng, c.latLng.lat]);\r\n        return coords[1]\r\n      })\r\n      .attr(\"r\", d => { return radiusScale(d.confirmedPer100k) })\r\n      .on('click', function (d) {\r\n        let city = citiesCodinates.find(c => c.ibgeCode === d.ibgeCode)\r\n        setSelectedCity(city)\r\n      })\r\n  }\r\n\r\n  return (\r\n    <div id=\"map\"></div>\r\n  )\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport moment from 'moment';\r\n\r\nfunction HistoricalDataChart(props) {\r\n\r\n  const [historicalCaseData, setHistoricalCaseData] = useState('');\r\n\r\n  const render = (canvas) => {\r\n    const height = 192, width = 384;\r\n\r\n    const ctx = canvas.getContext(\"2d\");\r\n    const gradient = ctx.createLinearGradient(0, 0, 0, height);\r\n    gradient.addColorStop(0, 'rgba(90,165,218,1)');\r\n    gradient.addColorStop(1, 'rgba(90,165,218,0)');\r\n\r\n    let res = historicalCaseData\r\n    if (res) {\r\n      res.datasets = res.datasets.map(d => ({\r\n        backgroundColor: gradient,\r\n        borderColor: \"#5aa5da\",\r\n        borderWidth: 2,\r\n        pointColor: \"#fff\",\r\n        pointStrokeColor: \"#5aa5da\",\r\n        pointHighlightFill: \"#fff\",\r\n        pointHighlightStroke: \"#5aa5da\",\r\n        data: d.data,\r\n        label: 'Casos'\r\n      }))\r\n\r\n      setHistoricalCaseData(res)\r\n    }\r\n    return historicalCaseData;\r\n  }\r\n\r\n  useEffect(() => {\r\n\r\n    let data = props.data;\r\n    if (data) {\r\n      let labels = data.map(d => d.date)\r\n      let caseDataset = data.map(d => d.cases)\r\n\r\n      let config = {\r\n        labels: labels,\r\n        datasets: [\r\n          {\r\n            data: caseDataset,\r\n            label: \"Casos\",\r\n          }\r\n        ]\r\n      }\r\n\r\n      setHistoricalCaseData(config)\r\n    }\r\n\r\n  }, [props])\r\n\r\n  return (\r\n    <Line\r\n      data={render}\r\n      options={{\r\n        legend: {\r\n          display: false\r\n        },\r\n        responsive: true,\r\n        scales: {\r\n          xAxes: [{\r\n            ticks: {\r\n              callback: value => {\r\n                let m = new moment(value, \"YYYY-MM-DD\");\r\n                return `${m.format('DD')}/${m.format('MM')}`\r\n              }\r\n            }\r\n          }]\r\n        }\r\n\r\n      }}\r\n      redraw={true} />\r\n  );\r\n}\r\n\r\nexport default HistoricalDataChart;","import React, { useEffect, useState, useRef } from 'react';\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport { MdSearch, MdClear } from \"react-icons/md\";\r\n\r\nimport './style.css'\r\n\r\nfunction SearchBar() {\r\n  const [searchText, setSearchText] = useState('');\r\n  const [recomendations, setRecomendations] = useState([]);\r\n  const [recomendationsShown, setRecomendationsShown] = useState(true);\r\n  const [cleanButtonShown, setCleanButtonShown] = useState(false);\r\n  const [selectedCity, setSelectedCity] = useState(undefined);\r\n  const dispatch = useDispatch()\r\n\r\n  const { citiesCoordinates: cities } = useSelector(state => ({ ...state.coordinatesReducer }))\r\n  const { selectedCity: rootCity } = useSelector(state => ({ ...state.selectedCityReducer }))\r\n\r\n  const ref = useRef();\r\n\r\n  useOnClickOutside(ref, () => setRecomendationsShown(false));\r\n\r\n  function useOnClickOutside(ref, handler) {\r\n    useEffect(\r\n      () => {\r\n        const listener = event => {\r\n          if (!ref.current || ref.current.contains(event.target)) {\r\n            return;\r\n          }\r\n          handler(event);\r\n        };\r\n        document.addEventListener('mousedown', listener);\r\n        document.addEventListener('touchstart', listener);\r\n\r\n        return () => {\r\n          document.removeEventListener('mousedown', listener);\r\n          document.removeEventListener('touchstart', listener);\r\n        };\r\n      },\r\n      [ref, handler]\r\n    );\r\n  }\r\n\r\n  useEffect(() => {\r\n    const value = searchText;\r\n    if (value == '') {\r\n      setRecomendations([])\r\n      setSelectedCity(undefined)\r\n    } else {\r\n      let recomendations = cities.filter(c => {\r\n        let cityName = c.city.toUpperCase().normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\")\r\n        let valueToFind = value.toUpperCase().normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r\n        return cityName.includes(valueToFind)\r\n      })\r\n      setRecomendations(recomendations.slice(0, 5))\r\n    }\r\n  }, [searchText])\r\n\r\n  useEffect(() => {\r\n    if (recomendations.length === 0) {\r\n      setCleanButtonShown(false)\r\n    } else {\r\n      setCleanButtonShown(true)\r\n    }\r\n  }, [recomendations])\r\n\r\n  useEffect(() => {\r\n    if (selectedCity) {\r\n      dispatch({\r\n        type: \"SET_CITY\",\r\n        city: selectedCity\r\n      })\r\n      setSearchText(selectedCity.city)\r\n    } else {\r\n      dispatch({\r\n        type: \"DESELECT_CITY\"\r\n      })\r\n\r\n    }\r\n\r\n    setRecomendationsShown(false)\r\n  }, [selectedCity])\r\n\r\n  useEffect(() => {\r\n    if (selectedCity && rootCity) {\r\n      if (selectedCity.ibgeCode !== rootCity.ibgeCode) {\r\n        if (rootCity.ibgeCode !== 42) {\r\n          setCleanButtonShown(true)\r\n          setSelectedCity(rootCity)\r\n        } else {\r\n          setSearchText('')\r\n          setSelectedCity(undefined)\r\n        }\r\n      }\r\n    } else if (rootCity) {\r\n      if (rootCity.ibgeCode !== 42) {\r\n        setCleanButtonShown(true)\r\n        setSelectedCity(rootCity)\r\n      }\r\n    }\r\n  }, [rootCity])\r\n\r\n  const selectedIfHasJustOneRecomendation = () => {\r\n    if (recomendations.length === 1) {\r\n      setSelectedCity(recomendations[0])\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div ref={ref}>\r\n      <form className=\"input-container test423\" onSubmit={(e) => { e.preventDefault(); selectedIfHasJustOneRecomendation() }}>\r\n        <span className=\"input-icon\">\r\n          <MdSearch />\r\n        </span>\r\n        {\r\n\r\n          !selectedCity\r\n            ? (\r\n              <input\r\n                onChange={(e) => setSearchText(e.target.value)}\r\n                onFocus={() => setRecomendationsShown(true)}\r\n                placeholder=\"Pesquisar cidade\"\r\n                type=\"text\"\r\n                name=\"search\"\r\n                id=\"search\"\r\n                value={searchText}\r\n                tabIndex=\"1\"\r\n                autoComplete=\"off\" />\r\n            )\r\n            : (\r\n              <div className=\"selected-city-container\">\r\n                <div className=\"selected-city\">\r\n                  {selectedCity.city}\r\n                </div>\r\n              </div>\r\n            )\r\n        }\r\n\r\n        <span className=\"input-icon\" onClick={() => setSearchText('')}>\r\n          {cleanButtonShown && (\r\n            <MdClear />\r\n          )}\r\n        </span>\r\n      </form>\r\n      {recomendationsShown && (\r\n        <div className=\"recomendation-container\">\r\n          {\r\n            recomendations.map((c, index) => (\r\n              <div\r\n                className=\"recomendation-item\"\r\n                tabIndex={index + 1}\r\n                key={c.ibgeCode}\r\n                onClick={() => setSelectedCity(c)}\r\n                onKeyDown={(e) => {\r\n                  const isTabCode = e.keyCode === 9;\r\n                  const isEnterCode = e.keyCode === 13;\r\n                  console.log(e.keyCode)\r\n                  let isLast = index === recomendations.length - 1;\r\n                  if (isTabCode && isLast) {\r\n                    document.getElementById(\"search\").focus()\r\n                    e.preventDefault()\r\n                  }else if(isEnterCode){\r\n                    setSelectedCity(c)\r\n                  }\r\n                }}\r\n              >\r\n                {c.city}\r\n              </div>\r\n            ))\r\n          }\r\n        </div>\r\n      )}\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default SearchBar;","import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { MdChevronLeft } from \"react-icons/md\";\r\n\r\nimport api from '../../services/api'\r\nimport Map from '../../components/Map'\r\nimport HistoricalDataChart from '../../components/HistoricalDataChart'\r\nimport SearchBar from '../../components/SearchBar'\r\n\r\nimport './style.css'\r\n\r\nexport default function Chart() {\r\n  const dispatch = useDispatch()\r\n  const [covidData, setCovidData] = useState('');\r\n  const [historicalCaseData, setHistoricalCaseData] = useState('');\r\n  const { selectedCity } = useSelector(state => ({ ...state.selectedCityReducer }))\r\n\r\n  const numberFormat = (value) => (parseInt(value) || 0).toLocaleString(undefined, { maximumFractionDigits: 2 });\r\n\r\n  useEffect(() => {\r\n    api.get(`/city/${selectedCity.ibgeCode}`)\r\n      .then(res => {\r\n        setCovidData(res.data)\r\n      })\r\n\r\n    api.get(`/city/${selectedCity.ibgeCode}/history`)\r\n      .then(res => {\r\n        setHistoricalCaseData(res.data)\r\n      })\r\n  }, [selectedCity])\r\n\r\n  const handleDeselectCity = ()=> {\r\n    dispatch({\r\n      type: \"DESELECT_CITY\"\r\n    })\r\n  }\r\n\r\n  const hasCitySelected = ()=> {\r\n    return selectedCity && selectedCity.ibgeCode !== 42;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"map-container-wrapper\">\r\n        <div className=\"test\">\r\n          <SearchBar />\r\n        </div>\r\n        <div className=\"chart-container\">\r\n          <Map />\r\n        </div>\r\n      </div>\r\n      <div className=\"details-container\">\r\n        <div className=\"details\">\r\n          {hasCitySelected() && (\r\n            <button className=\"back-to-state\" onClick={handleDeselectCity}>\r\n              <MdChevronLeft />\r\n            </button>\r\n          )}\r\n          <p className=\"title\">\r\n            {selectedCity.city || 'Santa Catarina'}\r\n          </p>\r\n          <div className=\"summary\">\r\n            <div className=\"summary-item\">\r\n              <div className=\"description\">\r\n                Casos confirmados:\r\n              </div>\r\n              <div className=\"value\">\r\n                {numberFormat(covidData.caseCount)}\r\n              </div>\r\n            </div>\r\n            <div className=\"summary-item\">\r\n              <div className=\"description\">\r\n                Obitos:\r\n              </div>\r\n              <div className=\"value\">\r\n                {numberFormat(covidData.deathCount)}\r\n              </div>\r\n            </div>\r\n            <div >\r\n              <div className=\"chart-title\">\r\n                Casos:\r\n              </div>\r\n                <HistoricalDataChart data={historicalCaseData}/>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React from 'react'\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\r\n\r\nimport Chart from './pages/Chart'\r\n\r\nexport default function Routes() {\r\n  return (\r\n    <BrowserRouter>\r\n      <Switch>\r\n        <Route path=\"/\" component={Chart}/>\r\n      </Switch>\r\n    </BrowserRouter>\r\n  );\r\n}","import React from 'react';\r\n\r\nimport './global.css'\r\n\r\nimport Routes from './routes'\r\n\r\nfunction App() {\r\n  return (\r\n   <Routes />\r\n  );\r\n}\r\n\r\nexport default App;","import { createStore, combineReducers } from \"redux\";\r\nimport citiesCordinates from '../data/cities-codinates.json';\r\n\r\nlet INITIAL_STATE = {}\r\n\r\nlet sc = {\r\n  city: \"Santa Catarina\",\r\n  ibgeCode: 42\r\n}\r\n\r\nfunction selectedCityReducer(state = { selectedCity: sc}, action) {\r\n  switch (action.type) {\r\n    case \"SET_CITY\":\r\n      return {\r\n        ...state,\r\n        selectedCity: action.city\r\n      };\r\n    case \"DESELECT_CITY\":\r\n      return {\r\n        ...state,\r\n        selectedCity: sc\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nfunction coordinatesReducer(state = { citiesCoordinates: citiesCordinates }, action) {\r\n  return state;\r\n}\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n  selectedCityReducer,\r\n  coordinatesReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, INITIAL_STATE);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nimport { Provider } from \"react-redux\";\r\nimport { createStore } from \"redux\";\r\n\r\nimport { store } from \"./stores/rootStore.js\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}